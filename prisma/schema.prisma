generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url  	    = env("DATABASE_URL")
// uncomment next line if you use Prisma <5.10
// directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
ADMIN
USER
}

model User {
id String    @id @default(cuid())
name String?
email String?   @unique
role UserRole @default(USER)
emailVerified DateTime?
image String?
password String?
accounts Account[]
isTwoFactorEnabled Boolean @default(false)
twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
id String  @id @default(cuid())
userId String
type String
provider String
providerAccountId String
refresh_token String?  @db.Text
access_token String?  @db.Text
expires_at Int?
token_type String?
scope String?
id_token String?    @db.Text
session_state String?

user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([provider, providerAccountId])
}

model VerificationToken {
id String @id @default(cuid())
token String
email String @unique
expires DateTime

@@unique([email, token])
}

model ResetPasswordToken {
id String @id @default(cuid())
token String @unique
email String
expires DateTime

@@unique([email, token])
}

model TwoFactorToken {
id String  @id @default(cuid())
token String @unique
email String
expires DateTime

@@unique([email, token])
}

model TwoFactorConfirmation {
id String @id @default(cuid())

user User @relation(fields: [userId], references: [id], onDelete: Cascade )
userId String

@@unique([userId])
}

// model ResendTimeToken {
// id String @id @default(cuid())
// email String @unique
// expires DateTime
// }